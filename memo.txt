MFC : 김성엽의 C 언어 이야기 강좌로 시작
간단하게 강의 듣고 실습하는 방식으로 진행할 것

강의 리스트는 2개 - 김성엽의 Window 응용 프로그래밍
			김성엽의 MFC

해당 파일은 강의를 하면서 기록하는 것임(진짜 강의에서 이야기하는 커리큘럼 대로 할 것)

목표 : 응용 프로그램의 전체적인 구조를 습득하고 실제 어떻게 프로그램이 이루어지는 지 위주로 학습할 것


1. 운영체제
하드웨어마다 작동방식이 다른데 , 일일이 고려하여 사용할려면 불편하다
-> 그래서 등장한 것이 OS이다(각 장치를 제어하는 역할, 프로그램을 위한
프로그램)
사용자의 요구를 OS가 모두 들어줄 수 없어서, 응용 프로그램
운영체제가 제공하는 함수의 집합체 : API

응용 프로그램은 어떻게 만드는 가 : C언어와 운영체제에서 제공하는 API 함수를 이용하여 만듦

Resource : 운영체제에 의해서 관리되는 장치 혹은 해당 장치를 사용하기 위해 필요한 정보

응용 프로그램이 직접 리소스에 접근하면 위험함(운영체제의 중요 정보를 털거나 아예 작동 불가하도록 만들 수도 있음)
 
Handle : 운영체제는 자신의 리소스를 안전하게 관리하기 위해서 주소를 사용하는 포인털 대신 핸들이라는 개념을 사용 : 리소스의 주소를 정수로 치환한 것(리소스 주소 + 핸들 값 -> 핸들 테이블)
즉 중간과정에 있어서 직접 포인터를 이용하여 커널 단에 접근하는 것이 아니라. 핸들을 이용하여 정수값을 매개하여 핸들값을 얻거나 혹은 필요한 동작을 하게 하는 것

Win32는 기본적으로 HANDLE 이라는 자료형을 기본적으로 사용 : unsigned int와 동일
핸들을 의미하는 자료형은 모두 앞에 H로 시작함

HINSTANCE : 윈도우즈 운영체제에서 실행되는 프로그램들을 구별되기 위한 ID 값/ 프로그램을 구별하기 위한 값이므로 여러 같은 프로그램이 떠있어도 값이 같음
Process ID와는 다름(메모리에 실행 가능한 상태로 재배열된 실행 코드를 프로세스라 하며 그 아이디를 프로세스 아이디라 함)

기본덕으로 hinstance 값을 매개변수로 사요하는 이유도... 종류 구별을 위해서(직접 접근하는 견 위험해요!!)

동기화 : A 값을 구한 사람이 다음 작업을 위해 B 값을 구하는 작을 완료하기 전까지 기다려주는 행위/ 즉 순서가 있는 일을 분할하여 처리했을 때, 순서가 꼬이지 않도록 조정하는 행위

Thread : 하나의 스레드로 작업하는 경우에는 상관 없지만 복수일 경우 상관있다.
윈도우애서 이벤트 객체를 사용하는 것, 같은 프로세스 내에 있는 스레드 간에도, 서로 다른 프로세스에 있는 스레드 간에도 사용할 수 있어서 유용함
이벤트 객체는 0또는 1을 기억할 수 있는 커널 객체이며 CreateEvent 함수를 호출하여 만들 수 있음 - CloseHandle(h_event_object)로 닫을 수 있음


